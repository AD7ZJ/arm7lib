/*******************************************************************************
 *                                                                             *
 * FontGen commons include file,                                               *
 *        generated by FontGen v2.50 - Latin Grayscale                         *
 *        on 8/6/2008 10:23:19 AM                                              *
 *                                                                             *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' *
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,       *
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR      *
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR          *
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,       *
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,         *
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; *
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,    *
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR     *
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF      *
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE                                   *
 *******************************************************************************/


#ifndef FONTGEN_FTYPES
#define FONTGEN_FTYPES

// fontgen.h typedefs specific to hardware; port FontGen output to your hardware by modifying following typedefs

/// Signed 8-bit number in the range -128 through 127.
typedef char fint8;

/// Unsigned 8-bit number in the range 0 through 255.
typedef unsigned char fuint8;

/// Signed 16-bit number in the range -32768 through 32767.
typedef signed short fint16;

/// Unsigned 16-bit number in the range 0 through 65535.
typedef unsigned short fuint16;

// customize FontGen output with the following conditional defines to reduce memory footprint 

#define FONTGEN_HAVE_MAPPING_TABLE 
#undef FONTGEN_HAVE_EXTENDED_MAPPING_TABLE 
#define FONTGEN_HAVE_PRECALCULATED_OFFSETS
#undef FONTGEN_HAVE_MINMAX_X
#undef FONTGEN_HAVE_MINMAX_Y
#undef FONTGEN_HAVE_VERSION
#undef FONTGEN_HAVE_FONT_DETAILS
#undef FONTGEN_FIT_TO_16BIT_BOUNDARY

// error checks

#ifdef FONTGEN_HAVE_EXTENDED_MAPPING_TABLE
#define FONTGEN_USE_EXTENDED_MAPPING_TABLE
#else
#ifdef FONTGEN_HAVE_MAPPING_TABLE
#define FONTGEN_USE_MAPPING_TABLE
#else
#error 'need a mapping table'
#endif
#endif

#ifdef FONTGEN_HAVE_PRECALCULATED_OFFSETS
#define FONTGEN_USE_PRECALCULATED_OFFSETS 
#endif

#ifdef FONTGEN_USE_MAPPING_TABLE
#ifndef FONTGEN_HAVE_MAPPING_TABLE
#error 'you have to have mapping table'
#endif
#endif

#ifdef FONTGEN_USE_EXTENDED_MAPPING_TABLE
#ifndef FONTGEN_HAVE_EXTENDED_MAPPING_TABLE
#error 'you have to have extended mapping table'
#endif
#endif




typedef struct FONT_DEF {
#ifdef FONTGEN_HAVE_VERSION
   fuint8 definition_version;         /* Version of the font definition.
                                         Intended to be used later for any
                                         major changes in the image definition format.
                                         This will be incremented with each change
                                         in the definition format. The code using
                                         this structure will check the first byte
                                         of the structure first, to decide 
                                         on the format of the image definition structure. */
#ifdef FONTGEN_FIT_TO_16BIT_BOUNDARY
   fuint8 filler;                     /* Just placeholder, to be able to align 16-bit fields below, to 16-bit boundary */
                                      /* Waste of memory for 8-bit micros */
#endif
#endif
   fuint8 glyph_height;               /* glyph height for storage             */
   fuint8 glyph_width;                /* glyph width in pixels. 0 for variable width fonts */
   fuint8 *width_table;               /* glyph_width table start adress. NULL for fixed width fonts */
   fuint8 *black_height_table;        /* black_height table start adress. */
   fuint8 *black_width_table;         /* black_width table start adress. */
   fuint8 *origin_y_table;            /* origin_y table start adress. */
   fint8 *origin_x_table;             /* origin_x table start adress. */
#ifdef FONTGEN_HAVE_MINMAX_Y
   /* Following two values can be used to print more dense lines, with less spaces between lines */
   fuint8 minOriginY;                 /* minimum origin Y over all characters in this character set */
   fuint8 maxBlackEndY;               /* maximum ending point of black area (origin_y + black_height) over all characters in this character set */
#endif
#ifdef FONTGEN_HAVE_MINMAX_X
   fint8 minOriginX;                  /* minimum origin X over all characters in this character set */
   fint8 maxBlackEndX;                /* maximum ending point of black area (origin_x + black_width) over all characters in this character set */
#endif
   fuint8 *glyph_table;               /* pointer to the font definition table */
#ifdef FONTGEN_HAVE_MAPPING_TABLE 
   fuint8 *mapping_table;             /* used to find the index of a glyph    */
#endif
#ifdef FONTGEN_HAVE_EXTENDED_MAPPING_TABLE 
   fuint16 *extended_mapping_table;   /* used to find the index of a glyph    */
#endif
#ifdef FONTGEN_HAVE_PRECALCULATED_OFFSETS
   fuint16 *offset_table;             /* keeps the offsets of the first byte of each glyph   */
#endif
   fuint16 glyphs;                    /* total number of glyphs in this font definition */
#ifdef FONTGEN_HAVE_FONT_DETAILS
   fuint8 font_size;                  /* size of your windows font used for this conversion */
#endif
   fuint8 rotation:2;                 /* 0: 0, 1: 90, 2: 180, 3: 270 degrees  */
   fuint8 color_depth:3;              /* Holds that how many bits we're using
                                         to represent a pixel. */
#ifdef FONTGEN_HAVE_FONT_DETAILS
   fuint8 bold:1;                     /* is font bold? */
   fuint8 italic:1;                   /* is font italic? */
   fuint8 underline:1;                /* is font underlined? */
   fuint8 strikeout:1;                /* is font strikeout? */
   fuint8 flipX:1;                    /* are the glyphs flipped in the X direction? */
   fuint8 flipY:1;                    /* are the glyphs flipped in the Y direction? */
   fuint8 reverse:1;                  /* is the bits reversed for the glyphs? */
#endif
} FONT_DEF;


typedef struct IMG_DEF {
#ifdef FONTGEN_HAVE_VERSION
   fuint8 definition_version;         /* Version of the image definition.
                                         Intended to be used later for any
                                         major changes in the image definition format.
                                         This will be incremented with each change
                                         in the definition format. The code using
                                         this structure will check the first byte
                                         of the structure first, to decide 
                                         on the format of the image definition structure. */
#endif
   fuint8 width_in_pixels;            /* Image width */
   fuint8 height_in_pixels;           /* Image height */
   fuint8 *char_table;                /* Image table start address in memory.
                                         This is a flat one dimensional array,
                                         and holds the info for the image.
                                         The first ceil(width_in_pixels/8) bytes
                                         hold the pixels for first line (for the unrotated images). 
                                         It occupies (ceil(width_in_pixels/8)*height_in_pixels) 
                                         bytes in total (for the unrotated images)*/
   fuint8 rotation:2;                 /* 0: 0, 1: 90, 2: 180, 3: 270 degrees */
   fuint8 color_depth:3;              /* Holds that how many bits we're using
                                         to represent a pixel. */
} IMG_DEF;


#endif


